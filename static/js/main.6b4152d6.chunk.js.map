{"version":3,"sources":["helpers/boxColorsList.ts","reducer.ts","components/Box.tsx","components/Autocomplete.tsx","components/SaveColor.tsx","components/SavedColorsList.tsx","components/ColorSelector.tsx","App.tsx","index.tsx"],"names":["boxColorsList","reducer","state","action","type","boxColor","includes","payload","toLocaleLowerCase","typedColor","results","filter","color","startsWith","toLowerCase","error","savedColors","length","pop","initialState","Box","className","style","backgroundColor","Autocomplete","dispatch","placeholder","value","onChange","event","target","map","onClick","innerHTML","SaveColor","SavedColorsList","index","background","TaskOne","useReducer","useEffect","App","ColorSelector","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAaA,EAAgB,CAC3B,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,aACA,aACA,aACA,cACA,gBACA,gBACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,mBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,eChJWC,EAAU,SAACC,EAAcC,GACpC,OAAQA,EAAOC,MACb,IAAK,OACH,OAAO,2BACFF,GADL,IAEEF,cAAeA,IAEnB,IAAK,mBACH,IAAIK,EAAW,GAIf,OAHIL,EAAcM,SAASH,EAAOI,QAAQC,uBACxCH,EAAWF,EAAOI,SAEb,2BACFL,GADL,IAEEO,WAAYN,EAAOI,QACnBF,SAAUA,EACVK,QAASP,EAAOI,UAAYF,EAAWL,EAAcW,QAAO,SAACC,GAAD,OAAWA,EAAMC,WAAWV,EAAOI,QAAQO,kBAAkB,GACzHC,MAAO,KAEX,IAAK,aACH,OAAKb,EAAMG,SAMPH,EAAMc,YAAYV,SAASJ,EAAMG,UAC5B,2BACFH,GADL,IAEEa,MAAO,kCAIPb,EAAMc,YAAYC,OAAS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","file":"static/js/main.6b4152d6.chunk.js","sourcesContent":["export const boxColorsList = [\n  'aliceblue',\n  'antiquewhite',\n  'aqua',\n  'aquamarine',\n  'azure',\n  'beige',\n  'bisque',\n  'black',\n  'blanchedalmond',\n  'blue',\n  'blueviolet',\n  'brown',\n  'burlywood',\n  'cadetblue',\n  'chartreuse',\n  'chocolate',\n  'coral',\n  'cornflowerblue',\n  'cornsilk',\n  'crimson',\n  'cyan',\n  'darkblue',\n  'darkcyan',\n  'darkgoldenrod',\n  'darkgray',\n  'darkgrey',\n  'darkgreen',\n  'darkkhaki',\n  'darkmagenta',\n  'darkolivegreen',\n  'darkorange',\n  'darkorchid',\n  'darkred',\n  'darksalmon',\n  'darkseagreen',\n  'darkslateblue',\n  'darkslategray',\n  'darkslategrey',\n  'darkturquoise',\n  'darkviolet',\n  'deeppink',\n  'deepskyblue',\n  'dimgray',\n  'dimgrey',\n  'dodgerblue',\n  'firebrick',\n  'floralwhite',\n  'forestgreen',\n  'fuchsia',\n  'gainsboro',\n  'ghostwhite',\n  'gold',\n  'goldenrod',\n  'gray',\n  'grey',\n  'green',\n  'greenyellow',\n  'honeydew',\n  'hotpink',\n  'indianred',\n  'indigo',\n  'ivory',\n  'khaki',\n  'lavender',\n  'lavenderblush',\n  'lawngreen',\n  'lemonchiffon',\n  'lightblue',\n  'lightcoral',\n  'lightcyan',\n  'lightgoldenrodyellow',\n  'lightgray',\n  'lightgrey ',\n  'lightgreen',\n  'lightpink ',\n  'lightsalmon',\n  'lightseagreen',\n  'lightskyblue ',\n  'lightslategray',\n  'lightslategrey',\n  'lightsteelblue',\n  'lightyellow',\n  'lime',\n  'limegreen',\n  'linen',\n  'magenta',\n  'maroon',\n  'mediumaquamarine',\n  'mediumblue',\n  'mediumorchid',\n  'mediumpurple',\n  'mediumseagreen',\n  'mediumslateblue',\n  'mediumspringgreen',\n  'mediumturquoise ',\n  'mediumvioletred',\n  'midnightblue',\n  'mintcream',\n  'mistyrose',\n  'moccasin',\n  'navajowhite',\n  'navy',\n  'oldlace',\n  'olive',\n  'olivedrab',\n  'orange',\n  'orangered',\n  'orchid',\n  'palegoldenrod',\n  'palegreen',\n  'paleturquoise',\n  'palevioletred',\n  'papayawhip',\n  'peachpuff',\n  'peru',\n  'pink',\n  'plum',\n  'powderblue',\n  'purple',\n  'red',\n  'rosybrown',\n  'royalblue',\n  'saddlebrown',\n  'salmon',\n  'sandybrown',\n  'seagreen',\n  'seashell',\n  'sienna',\n  'silver',\n  'skyblue',\n  'slateblue',\n  'slategray',\n  'slategrey',\n  'snow',\n  'springgreen',\n  'steelblue',\n  'tan',\n  'teal',\n  'thistle',\n  'tomato',\n  'turquoise',\n  'violet',\n  'wheat',\n  'white',\n  'whitesmoke',\n  'yellow',\n  'yellowgreen',\n];\n","import { State, ActionType } from './types';\nimport { boxColorsList } from './helpers/boxColorsList';\n\nexport const reducer = (state: State, action: ActionType) => {\n  switch (action.type) {\n    case 'INIT':\n      return {\n        ...state,\n        boxColorsList: boxColorsList,\n      };\n    case 'CHANGE_BOX_COLOR':\n      let boxColor = '';\n      if (boxColorsList.includes(action.payload.toLocaleLowerCase())) {\n        boxColor = action.payload;\n      }\n      return {\n        ...state,\n        typedColor: action.payload,\n        boxColor: boxColor,\n        results: action.payload && !boxColor ? boxColorsList.filter((color) => color.startsWith(action.payload.toLowerCase())) : [],\n        error: '',\n      };\n    case 'SAVE_COLOR':\n      if (!state.boxColor) {\n        return {\n          ...state,\n          error: 'Chose color',\n        };\n      }\n      if (state.savedColors.includes(state.boxColor)) {\n        return {\n          ...state,\n          error: 'This color is already saved.',\n        };\n      }\n      let savedColors;\n      if (state.savedColors.length < 10) {\n        savedColors = [state.boxColor, ...state.savedColors];\n      } else {\n        state.savedColors.pop();\n        savedColors = [state.boxColor, ...state.savedColors];\n      }\n      return {\n        ...state,\n        savedColors: savedColors,\n      };\n\n    case 'CHOSE_COLOR':\n      return {\n        ...state,\n        typedColor: action.payload,\n        boxColor: action.payload,\n        results: [],\n      };\n  }\n};\n\nexport const initialState: State = {\n  typedColor: '',\n  boxColor: '',\n  boxColorsList: [],\n  savedColors: [],\n  results: [],\n  error: '',\n};\n","import React, { FC } from 'react';\n\ntype Props = {\n  boxColor: string;\n  typedColor: string;\n};\n\nconst Box: FC<Props> = ({ boxColor, typedColor }) => {\n  return (\n    <div\n      className=\"box color-box\"\n      style={{\n        backgroundColor: boxColor ? boxColor : 'transparent',\n      }}\n    >\n      {boxColor && (\n        <div className=\"notification has-text-centered\">\n          <strong>{boxColor.toLowerCase()}</strong>\n        </div>\n      )}\n      {typedColor !== '' && !boxColor && (\n        <div className=\"notification has-text-centered\">\n          <strong>Invalid color</strong>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Box;\n","import React, { Dispatch, FC } from 'react';\nimport { ActionType } from 'types';\n\ntype Props = {\n  typedColor: string;\n  results: string[];\n  dispatch: Dispatch<ActionType>;\n};\n\nconst Autocomplete: FC<Props> = ({ typedColor, results, dispatch }) => {\n  const changeBoxColor = (value: string) => {\n    dispatch({ type: 'CHANGE_BOX_COLOR', payload: value });\n  };\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input className=\"input\" type=\"text\" placeholder=\"type color\" value={typedColor} onChange={(event) => changeBoxColor(event.target.value)} />\n      </div>\n      <div className=\"autocomplete-list\">\n        {results.map((color) => (\n          <div\n            className=\"notification mb-0 list-item\"\n            key={color}\n            style={{ backgroundColor: color }}\n            onClick={(event) => {\n              dispatch({\n                type: 'CHOSE_COLOR',\n                //@ts-ignore\n                payload: event.target.innerHTML,\n              });\n            }}\n          >\n            {color}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Autocomplete;\n","import React, { Dispatch, FC } from 'react';\nimport { ActionType } from '../types';\n\ntype Props = {\n  dispatch: Dispatch<ActionType>;\n};\n\nconst SaveColor: FC<Props> = ({ dispatch }) => {\n  return (\n    <button className=\"button is-primary ml-4\" onClick={() => dispatch({ type: 'SAVE_COLOR' })}>\n      Save color\n    </button>\n  );\n};\nexport default SaveColor;\n","import React, { Dispatch, FC } from 'react';\nimport { ActionType } from '../types';\n\ntype Props = {\n  savedColors: string[];\n  dispatch: Dispatch<ActionType>;\n};\n\nconst SavedColorsList: FC<Props> = ({ savedColors, dispatch }) => {\n  if (savedColors.length) {\n    return (\n      <div className=\"box is-flex saved-colors-list\">\n        {savedColors.map((color, index) => (\n          <button\n            key={`${color}-${index}`}\n            className=\"button\"\n            style={{ background: color }}\n            onClick={() => {\n              dispatch({\n                type: 'CHOSE_COLOR',\n                payload: color,\n              });\n            }}\n          >\n            {color}\n          </button>\n        ))}\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default SavedColorsList;\n","import React, { FC, Reducer, useEffect, useReducer } from 'react';\nimport { State, ActionType } from '../types';\nimport { reducer, initialState } from '../reducer';\nimport Box from './Box';\nimport Autocomplete from './Autocomplete';\nimport SaveColor from './SaveColor';\nimport SavedColorsList from './SavedColorsList';\n\nconst TaskOne: FC = () => {\n  const [state, dispatch] = useReducer<Reducer<State, ActionType>>(reducer, initialState);\n\n  const { boxColor, typedColor, results, savedColors, error } = state;\n\n  useEffect(() => {\n    dispatch({ type: 'INIT' });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title is-1\">CSS COLOR SELECTOR</h1>\n      {error && <div className=\"notification is-danger is-light\">{error}</div>}\n      <Box boxColor={boxColor} typedColor={typedColor} />\n      <div className=\"is-flex\">\n        <Autocomplete typedColor={typedColor} results={results} dispatch={dispatch} />\n        <SaveColor dispatch={dispatch} />\n      </div>\n      <SavedColorsList savedColors={savedColors} dispatch={dispatch} />\n    </div>\n  );\n};\n\nexport default TaskOne;\n","import React from 'react';\nimport 'bulma';\nimport './style/style.scss';\nimport ColorSelector from './components/ColorSelector';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"notification is-warning has-text-centered\">\n        Type CSS color name into input field and chose color from autocomplete list with click. Clicking on the save button enables to save up to 10\n        colors. <br />\n        Project is ongoing and new features are continuously implemented. Arrow keys and enter <strong>are not</strong> supported for chosing color at\n        the moment.\n      </div>\n      <ColorSelector />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}